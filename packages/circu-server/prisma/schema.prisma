generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 字段存活状态
enum SurvivalStatus {
  // 未删除
  ALIVE
  // 已删除(可回收)
  DELETED
  // 已删除(不可回收)
  COMPLETELY_DELETED
}

// 文档类型
//TODO: 加一个约束
enum DocType {
  GENERAL
  WIKI
}

// 规则类型
enum RoleType {
  ADMINISTRATOR
  COLLABORATOR
  READER
}

model Folder {
  id             String         @id @default(cuid()) @map("id")
  lastModify     DateTime       @map("last_modify")
  title          String         @map("title")
  description    String?        @map("description")
  survivalStatus SurvivalStatus @default(ALIVE) @map("survival_status")
  lastDeleted    DateTime?      @map("last_deleted")

  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id])

  childrenDocs Doc[]

  parentFolderId  String?  @map("parent_folder_id")
  parentFolder    Folder?  @relation("folder_parent", fields: [parentFolderId], references: [id])
  childrenFolders Folder[] @relation("folder_parent")

  roles Role[]

  fastAccessedUsers User[] @relation("fast_access_folders_to_users")

  likedBestUsers User[] @relation("favorite_folders_to_users")

  @@map("folder")
}

model Doc {
  id             String         @id @default(cuid()) @map("id")
  lastModify     DateTime       @map("last_modify")
  value          Json           @map("value")
  survivalStatus SurvivalStatus @default(ALIVE) @map("survival_status")
  lastDeleted    DateTime?      @map("last_deleted")
  docType        DocType        @map("doc_type")

  authorId String @map("author_id")
  author   User   @relation(fields: [authorId], references: [id])

  // 类型为 general doc 时
  parentFolderId String? @map("parent_folder_id")
  parentFolder   Folder? @relation(fields: [parentFolderId], references: [id])

  // 类型为 wiki doc 时
  parentDocId  String? @map("parent_doc_id")
  parentDoc    Doc?    @relation("wiki_doc_to_docs", fields: [parentDocId], references: [id])
  childrenDocs Doc[]   @relation("wiki_doc_to_docs")

  roles Role[]

  fastAccessedUsers User[] @relation("fast_access_docs_to_users")

  likedBestUsers User[] @relation("favorite_docs_to_users")

  @@map("doc")
}

model User {
  id             String         @id @default(cuid()) @map("id")
  username       String         @map("username")
  nickname       String         @map("nickname")
  password       Bytes          @map("password")
  survivalStatus SurvivalStatus @default(ALIVE) @map("survival_status")

  authoredDocs   Doc[]
  authoredFolders Folder[]

  fastAccessDocs    Doc[]    @relation("fast_access_docs_to_users")
  fastAccessFolders Folder[] @relation("fast_access_folders_to_users")

  favoriteDocs    Doc[]    @relation("favorite_docs_to_users")
  favoriteFolders Folder[] @relation("favorite_folders_to_users")

  roles Role[] @relation("roles_to_users")

  accessLogs UserAccessLog[]

  @@map("user")
}

model UserAccessLog {
  id     String   @id @default(cuid()) @map("id")
  userId String   @map("user_id")
  user   User     @relation(fields: [userId], references: [id])
  time   DateTime @map("time")

  @@map("user_access_log")
}

// 角色表, 每个角色代表着某个文件夹和某个文档的一种权限, 分别为管理者, 协作者, 阅读者
// 角色之间的父子关系参考文件夹与文档, 文档与文档之间的父子关系, 父角色拥有子角色的所有权限
// 父子关系举例:
//   若目录结构为: 
//     folder_1 < doc_1
//   则角色父子关系为: (a 为管理员角色, c 为协作者角色, r 为阅读者角色)
//     folder_1.a <- folder_1.c <- folder_1.r
//        ^             ^             ^
//        |             |             |
//       doc_1.a <-- doc_1.c <---- doc_1.r
model Role {
  id       String   @id @default(cuid()) @map("id")
  roleType RoleType @map("role_type")

  docId String? @map("doc_id")
  doc   Doc?    @relation(fields: [docId], references: [id])

  folderId String? @map("folder_id")
  folder   Folder? @relation(fields: [folderId], references: [id])

  users User[] @relation("roles_to_users")

  parentRoles   Role[] @relation("parent_roles_to_child_roles")
  childrenRoles Role[] @relation("parent_roles_to_child_roles")

  @@map("role")
}
